#!/bin/bash
# ------------------------------------------------------------------------------
# 
# Name:    musiclib.sh
# Author:  Gabriel Gonzalez
# Email:   gabeg@bu.edu
# License: The MIT License (MIT)
# 
# Syntax: ./musiclib [options]
# 
# Description: A command line interface to interact with your music library.
# 
# Notes: There's a thing with last lines when reading the file and getting
#        length of file. There's a hard limit of 10 save results.
# 
# ------------------------------------------------------------------------------

##
# Source utilities.
##
. "commandline.sh"
. "io.sh"

##
# Directories.
##
MUSIC_LIB_SHARE_DIR="${HOME}/.local/share/${PROJECT}"
MUSIC_LIB_LIBRARY_DIR="${MUSIC_LIB_SHARE_DIR}/library"
MUSIC_LIB_PLAYLIST_DIR="${MUSIC_LIB_SHARE_DIR}/playlist"

##
# Files.
##
MUSIC_LIB_LIBRARY_FILE="${MUSIC_LIB_LIBRARY_DIR}/library.txt"
MUSIC_LIB_RESULTS_SITE="/tmp/results.html"
MUSIC_LIB_RESULTS_FILE="/tmp/results.txt"

##
# Options.
##
VERBOSE=
MUSIC_LIB_DRYRUN=
MUSIC_LIB_PROMPT=
MUSIC_LIB_UNOFFICIAL=
MUSIC_LIB_VERBOSE=

##
# Exit statuses.
##
EXIT_MUSIC_LIB_INVALID_INSTALL_ARG=6
EXIT_MUSIC_LIB_INVALID_INSTALL_LOC=6
EXIT_MUSIC_LIB_INVALID_SEARCH=7
EXIT_MUSIC_LIB_SEARCH_PAGE_ERROR=8
EXIT_MUSIC_LIB_INVALID_DOWNLOAD=9
EXIT_MUSIC_LIB_ARTIST_NOT_FOUND=10
EXIT_MUSIC_LIB_SONG_NAME_NOT_FOUND=11
EXIT_MUSIC_LIB_MUSIC_NOT_FOUND=12
EXIT_MUSIC_LIB_INVALID_RESULT=13
EXIT_MUSIC_LIB_INVALID_FIND=14
EXIT_MUSIC_LIB_FIND_EMPTY=15

##
# Music Library.
##
main()
{
    cli_options "-h|--help          |Print program usage." \
                "-d|--download=song:|Download music." \
                "-T|--dry-run       |Do not create artist directories or download any songs. Used with '-S'." \
                "-f|--find=search:  |Find music in the library or playlist. See '-p' option." \
                "  |--install       |Install the necessary Music Library components." \
                "-l|--list=search:  |List music in the library or playlist. See '-p' option.." \
                "-n|--no-prompt     |Do not prompt the user to select a video to download." \
                "-p|--path=location:|Search in 'library' or 'playlist'. [Default: 'playlist']." \
                "-S|--sync          |Sync music library." \
                "  |--uninstall     |Uninstall the Music Library." \
                "-u|--unofficial    |Do not append 'official' to the Youtube search string." \
                "-v|--verbose       |Verbose output."
    cli_parse "${@}"

    local help=$(cli_get "help")
    local download=$(cli_get "download")
    local find=$(cli_get "find")
    local install=$(cli_get "install")
    local list=$(cli_get "list")
    local path=$(cli_get "path")
    local sync=$(cli_get "sync")
    local uninstall=$(cli_get "uninstall")

    MUSIC_LIB_DRYRUN=$(cli_get "dry-run")
    MUSIC_LIB_PROMPT=$(cli_get "no-prompt")
    MUSIC_LIB_UNOFFICIAL=$(cli_get "unofficial")
    MUSIC_LIB_VERBOSE=$(cli_get "verbose")

    trap music_lib_cleanup EXIT
    if [ -n "${help}" ]
    then
        cli_usage
    elif [ -n "${install}" ]
    then
        music_lib_install
    else
        if [ ! -d "${MUSIC_LIB_SHARE_DIR}" ]
        then
            print_err "Music Library share directory has not been installed yet. See '--install'."
            exit ${MUSIC_LIB_SHARE_DIR_NOT_FOUND}
        fi
        if [ -n "${download}" ]
        then
            music_lib_download "${download}"
        elif [ -n "${find}" ]
        then
            music_lib_find "${find}" "${path}"
        elif [ -n "${list}" ]
        then
            music_lib_list "${list}" "${path}"
        elif [ -n "${sync}" ]
        then
            music_lib_sync
        elif [ -n "${uninstall}" ]
        then
            music_lib_uninstall
        else
            exit 1
        fi
    fi
    exit $?
}

##
# Download music.
##
music_lib_download()
{
    if [ -z "${1}" ]
    then
        print_err "Must specify song to download."
        exit ${EXIT_MUSIC_LIB_INVALID_DOWNLOAD}
    fi
    local download="${1}"
    local sync="${2}"
    local artist=$(music_lib_get_artist "${download}")
    local song=$(music_lib_get_song "${download}")
    local status=0

    music_lib_download_downloadable "${artist}" "${song}"
    status=$?
    if [ ${status} -ne 0 ]
    then
        return ${status}
    fi

    music_lib_download_start "${download}" "${artist}" "${song}"
    status=$?
    if [ ${status} -ne 0 ]
    then
        return ${status}
    fi
}

##
# Find any artist or songs that match the input string.
# 
# Searches occur in either the library or the playlist directory.
##
music_lib_find()
{
    if [ -z "${1}" ]
    then
        print_err "Must specify song to find."
        exit ${EXIT_MUSIC_LIB_INVALID_FIND}
    fi
    local search="${1}"
    local path="${2}"
    local artiststatus=0
    local songstatus=0
    music_lib_search "artist" "${search}" "${path}"
    artiststatus=$?
    music_lib_search "song" "${search}" "${path}"
    songstatus=$?
    if [ ${artiststatus} -ne 0 -a ${songstatus} -ne 0 ]
    then
        print_err "No artists or songs match '${search}'."
        exit ${EXIT_MUSIC_LIB_INVALID_FIND}
    fi
    return 0
}


##
# Install the Music Library.
# 
# Create the share directory under ~/.local/share, and create symbolic links to
# the user's playlist and library locations.
##
music_lib_install()
{
    music_lib_install_location "share"
    music_lib_install_location "playlist"
    music_lib_install_location "library"
}


##
# List the songs that match the input string, where the input string corresponds
# to either a playlist or artist.
# 
# Searches occur in either the library or the playlist directory. If searching
# in the library directory, list the artist's songs. If searching in the
# playlist directory, list the playlist's songs.
##
music_lib_list()
{
    if [ -z "${1}" ]
    then
        print_err "Must specify song or playlist to list."
        exit ${EXIT_MUSIC_LIB_INVALID_FIND}
    fi
    local search="${1}"
    local path=$(music_lib_get_path "${2}")
    music_lib_search "list" "${search}" "${path}"
    return $?
}

##
# Sync the music library.
##
music_lib_sync()
{
    local line=
    while IFS= read -r line
    do
        if [ ! -n "${line}" ]
        then
            continue
        fi
        music_lib_download "${line}" "sync"
    done < "${MUSIC_LIB_LIBRARY_FILE}"
}

##
# Uninstall configuration files under ~/.local/share and remove any temporary
# files that were created.
##
music_lib_uninstall()
{
    music_lib_cleanup "uninstall"
}

##
# Start download process.
##
music_lib_download_start()
{
    local download="${1}"
    local artist="${2}"
    local song="${3}"
    local status=0

    builtin cd "${MUSIC_LIB_LIBRARY_DIR}"
    if [ -n "${artist}" ]
    then
        mkdir -pv "${artist}"
        builtin cd "${artist}"
    fi

    music_lib_download_search_page "${download}"
    status=$?
    if [ ${status} -ne 0 ]
    then
        return ${status}
    fi

    music_lib_download_save_results
    status=$?
    if [ ${status} -ne 0 ]
    then
        return ${status}
    fi

    music_lib_download_content "${artist}" "${song}"
    status=$?
    if [ ${status} -ne 0 ]
    then
        return ${status}
    fi
}

##
# Check if song is downloadable.
##
music_lib_download_downloadable()
{
    local artist="${1}"
    local song="${2}"
    if ! music_lib_is_artist "${artist}" && ! music_lib_is_song "${song}"
    then
        print_err "Could not determine artist and song name."
        return ${EXIT_MUSIC_LIB_SONG_NAME_NOT_FOUND}
    elif music_lib_is_music "${artist}" "${song}"
    then
        if [ -n "${sync}" ]
        then
            return 1
        fi
        print_err "Music '${file}' already exists in your music library."
        return ${EXIT_MUSIC_LIB_MUSIC_NOT_FOUND}
    else
        echo "Artist : ${artist}"
        echo "Song   : ${song}"
    fi

    if music_lib_is_dryrun
    then
        return 1
    else
        return 0
    fi
}

##
# Download content to the music library.
##
music_lib_download_content()
{
    local artist="${1}"
    local song="${2}"
    local resultnum=1
    local result=
    local status=0
    if music_lib_is_prompt
    then
        music_lib_download_prompt
        read -p "> " resultnum
    fi
    result=$(music_lib_download_get_result "${resultnum}")
    status=$?
    echo "Result: ${result}."
    if [ ${status} -ne 0 ]
    then
        return ${status}
    fi

    local website="https://www.youtube.com"
    local href="${result%%;*}"
    local title="${result#*;}"
    print_info "Downloading..."
    youtube-dl-mp3 --no-playlist -x --audio-format mp3 "${website}${href}"
    if [ -n "${title}" ]
    then
        local name="${artist} - ${song}"
        if [ -z "${artist}" ]
        then
            name="${song}"
        fi
        mv "${title}.mp3" "${name}.mp3"
    fi
}

##
# Get href of desired search from results page. Will prompt user if option is
# specified.
# Populate list of all hrefs in search page
##
music_lib_download_save_results()
{
    local IFS=$'\n'
    local line=
    local i=0
    echo "Results File: ${MUSIC_LIB_RESULTS_FILE}."
    : > "${MUSIC_LIB_RESULTS_FILE}"
    for line in $(grep 'href="/watch?v=' "${MUSIC_LIB_RESULTS_SITE}" | grep 'title=')
    do
        local ref=$(music_lib_download_get_href "${line}")
        local title=
        if [ "${ref/list=}" == "${ref}" ]
        then
            title=$(music_lib_download_get_title "${line}")
            i=$[ ${i} + 1 ]
            echo "${ref};${title}" >> "${MUSIC_LIB_RESULTS_FILE}"
            if ! music_lib_is_prompt || [ ${i} -eq 10 ]
            then
                break
            fi
        fi
    done
}

##
# Download search results page.
# 
# Convert the search string into a URL-friendly string, append "official video"
# to the end if unofficial flag is not set, and download the results page.
##
music_lib_download_search_page()
{
    local search="${1}"
    if [ -z "${search}" ]
    then
        print_err "Must specify a search query."
        exit ${EXIT_MUSIC_LIB_INVALID_SEARCH}
    fi
    print_info "Downloading search results page."
    local url=$(music_lib_download_get_url "${search}")
    wget -q "${url}" -O "${MUSIC_LIB_RESULTS_SITE}"
    if [ $? -ne 0 ]
    then
        print_err "Unable to download search page."
        exit ${EXIT_MUSIC_LIB_SEARCH_PAGE_ERROR}
    fi
    return 0
}

##
# Prompt user which song they would like to download.
##
music_lib_download_prompt()
{
    print_info "Which song would you like to download?"
    local line=
    local i=1
    while IFS= read -r line
    do
        echo "${i}: ${line}"
        i=$[ ${i} + 1 ]
    done < "${MUSIC_LIB_RESULTS_FILE}"
}

##
# Search for artists or songs matching the input string.
##
music_lib_search()
{
    local type="${1}"
    local search="${2}"
    local path=$(music_lib_get_path "${3}")
    local matches=()
    local m=
    local IFS=$'\n'
    builtin cd "${path}"

    case "${type}" in
        artist|list)
            matches=($(find . -iname "*${search}*" -type d -printf "%f\n"))
            ;;
        song)
            matches=($(find . -iname "*${search}*" -type f -printf "%f\n"))
            ;;
        *)
            print_err "Invalid search type '${type}'."
            exit ${EXIT_MUSIC_LIB_INVALID_FIND}
            ;;
    esac
    if [ ${#matches[@]} -eq 0 ]
    then
        return ${EXIT_MUSIC_LIB_FIND_EMPTY}
    fi

    if [ "${type}" == "list" ]
    then
        for m in "${matches[@]}"
        do
            echo "${m}:"
            printf "    %s\n" $(ls -1 "${m}/")
        done
    else
        echo "${type^}s:"
        for m in "${matches[@]}"
        do
            echo "    * ${m}"
        done
    fi
}

##
# Create Music Library links/directories for the given locations.
# 
# Accepted locations are 'share', 'library', or 'playlist'.
##
music_lib_install_location()
{
    local location="${1}"
    local destination=
    local message=
    local response=
    case "${location}" in
        share)
            print_info "Creating local share directory for the Music Library."
            mkdir -pv "${MUSIC_LIB_SHARE_DIR}"
            return 0
            ;;
        library)
            destination="${MUSIC_LIB_LIBRARY_DIR}"
            message="Where is your music library located?"
            ;;
        playlist)
            destination="${MUSIC_LIB_PLAYLIST_DIR}"
            message="Where are your music playlists located?"
            ;;
        *)
            exit ${EXIT_MUSIC_LIB_INVALID_INSTALL_ARG}
            ;;
    esac

    echo "${message}"
    read -p "> " response
    if [ ! -d "${response}" ]
    then
        print_err "Directory '${response}' does not exist."
        return ${EXIT_MUSIC_LIB_INVALID_INSTALL_LOC}
    else
        print_info "Saving music ${location} location."
        ln -sv "${response}" "${destination}"
    fi
    return 0
}

##
# Cleanup all files that were created.
##
music_lib_cleanup()
{
    if [ "${1}" == "uninstall" ]
    then
        print_info "Uninstalling the Music Library local share directory."
        rm -rfv "${MUSIC_LIB_SHARE_DIR}"
    fi
    rm -f "${MUSIC_LIB_RESULTS_SITE}"
    rm -f "${MUSIC_LIB_RESULTS_FILE}"
}

##
# Return the requested line in the results file.
##
music_lib_download_get_result()
{
    local num="${1}"
    local file="${MUSIC_LIB_RESULTS_FILE}"
    local length=$(wc -l < "${file}")
    if [ -z "${num}" ]
    then
        print_err "Exiting."
        return ${EXIT_MUSIC_LIB_INVALID_RESULT}
    fi
    if ! is_integer "${num}" || [ ${num} -lt 1 -o ${num} -gt ${length} ]
    then
        print_err "Unable to retrieve result number '${num}': No such result."
        return ${EXIT_MUSIC_LIB_INVALID_RESULT}
    fi
    sed "${num}q;d" "${file}"
    return $?
}

# ------------------------------------------------------------------------------
# Return href from a line in the search result page
music_lib_download_get_href()
{
    echo "${1}" \
        | grep -E -o 'href="/watch\?v=[^"]*' \
        | head -n 1 \
        | sed 's/href="//'
}

# ------------------------------------------------------------------------------
# Return title from a line in the search result page
music_lib_download_get_title()
{
    echo "${1}" \
        | grep -E -o 'title="[^"]*' \
        | head -n 1 \
        | sed 's/title="//; s/\&quot\;/"/g'
}

##
# Return the URL to the content.
##
music_lib_download_get_url()
{
    local search="${1}"
    local website="https://www.youtube.com"
    local url=$(echo "${website}/results?search_query=${search}" \
                    | sed -e 's/ /\+/g' -e 's/,/%2c/g' -e "s/'/%27/g")
    if music_lib_is_official
    then
        url="${url}+official+video"
    fi
    echo "${url}"
}

# Return the name of the artist from the input song name.
# 
# Expects an input song of the form 'Artist - Song.mp3'. If the input and output
# are exactly the same, return an error. In this case, it is assumed that the
# input is in fact the song name, without the artist.
##
music_lib_get_artist()
{
    local file="${1}"
    local artist="${file% - *}"
    if [ "${artist}" == "${file}" ]
    then
        return ${EXIT_MUSIC_LIB_ARTIST_NOT_FOUND}
    fi
    echo "${artist}"
    return 0
}

##
# Return the name of the song from the input song name.
# 
# Expects an input song of the form 'Artist - Song.mp3'; however, it is ok if
# the input and the output are exactly the same. Maybe the user does not know
# the artist's name.
##
music_lib_get_song()
{
    local file="${1}"
    local song="${file#* - }"
    echo "${song}"
    return 0
}

##
# Return the path to the playlist or library directory.
##
music_lib_get_path()
{
    local input="${1}"
    local path=
    case "${1}" in
        library) path="${MUSIC_LIB_LIBRARY_DIR}" ;;
        playlist) path="${MUSIC_LIB_PLAYLIST_DIR}" ;;
        *) path="${MUSIC_LIB_PLAYLIST_DIR}" ;;
    esac
    echo "${path}"
}

##
# Check if current run of the script is a dry-run.
##
music_lib_is_dryrun()
{
    if [ -n "${MUSIC_LIB_DRYRUN}" ]
    then
        return 0
    else
        return 1
    fi
}

##
# Check if the script needs to prompt the user.
##
music_lib_is_prompt()
{
    if [ -n "${MUSIC_LIB_PROMPT}" ]
    then
        return 0
    else
        return 1
    fi
}

##
# Check if the script should make a query for unofficial content.
##
music_lib_is_official()
{
    if [ -z "${MUSIC_LIB_UNOFFICIAL}" ]
    then
        return 0
    else
        return 1
    fi
}

##
# Check name of artist.
##
music_lib_is_artist()
{
    local artist="${1}"
    if [ -n "${artist}" ]
    then
        return 0
    else
        return 1
    fi
}

##
# Check song name.
##
music_lib_is_song()
{
    local song="${1}"
    if [ -n "${song}" ]
    then
        return 0
    else
        return 1
    fi
}

##
# Check if music file exists in the music library.
##
music_lib_is_music()
{
    local artist="${1}"
    local song="${2}"
    local file="${MUSIC_LIB_LIBRARY_DIR}/"
    if [ -n "${artist}" ]
    then
        file+="${artist}/${artist} - ${song}"
    else
        file+="${song}"
    fi
    if [ -f "${file}.mp3" ]
    then
        return 0
    fi
    return 1
}

##
# Run script
##
main "${@}"
