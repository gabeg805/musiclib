#!/bin/bash
# ------------------------------------------------------------------------------
# 
# Name:    musiclib.sh
# Author:  Gabriel Gonzalez
# Email:   gabeg@bu.edu
# License: The MIT License (MIT)
# 
# Syntax: ./musiclib [options]
# 
# Description: A command line interface to interact with your music library.
# 
# Notes: None.
# 
# ------------------------------------------------------------------------------

# Globals
PROGRAM="${0##*/}"
PROGDIR=$(dirname "$(readlink -f "${0}")")
PROGSHAREDIR="${HOME}/.local/share/${PROGRAM}"
PLAYLISTDIR="${PROGSHAREDIR}/playlist"
LIBRARYDIR="${PROGSHAREDIR}/library"
LIBRARYFILE="${LIBRARYDIR}/library.txt"
YOUTUBE="https://www.youtube.com"
RESULTPAGE="result.html"

MUSIC_LIB_RESULTS_FILE="results.txt"
MUSIC_LIB_DRYRUN=
MUSIC_LIB_PROMPT=
MUSIC_LIB_UNOFFICIAL=
MUSIC_LIB_VERBOSE=

# Options
VERBOSE=
SYNC=

# Source utility
. "commandline.sh"
. "io.sh"

EXIT_MUSIC_LIB_SEARCH_PAGE_ERROR=8
EXIT_MUSIC_LIB_INVALID_DOWNLOAD=9
EXIT_MUSIC_LIB_ARTIST_NOT_FOUND=10
EXIT_MUSIC_LIB_SONG_NAME_NOT_FOUND=11
EXIT_MUSIC_LIB_MUSIC_NOT_FOUND=12

##
# Music Library
##
main()
{
    cli_options "-h|--help           |Print program usage." \
                "-d|--download=song: |Download music." \
                "  |--dry-run        |Do not create artist directories or download any songs. Used with '-S'." \
                "-f|--find           |Find music in the library." \
                "-l|--list=playlist::|List music in the library." \
                "-p|--prompt         |Prompt the user to select a video, whose audio will be downloaded." \
                "-q|--query=search:::|Query string." \
                "-S|--sync           |Sync music library." \
                "-u|--unofficial     |Do not append 'official' to the Youtube search string." \
                "-v|--verbose        |Verbose output."
    cli_parse "${@}"
    cli_test

    local help="$(cli_get "help")"
    local download="$(cli_get "download")"
    local find="$(cli_get "find")"
    local list="$(cli_get "list")"
    local query="$(cli_get "query")"
    local sync="$(cli_get "sync")"

    MUSIC_LIB_DRYRUN="$(cli_get "dry-run")"
    MUSIC_LIB_PROMPT="$(cli_get "prompt")"
    MUSIC_LIB_UNOFFICIAL="$(cli_get "unofficial")"
    MUSIC_LIB_VERBOSE="$(cli_get "verbose")"

    # Run options
    if [ -n "${help}" ]
    then
        cli_usage
        exit 0
    elif [ -n "${download}" ]
    then
        download_music "${download}"
    elif [ -n "${find}" ]
    then
        find_music_in_library "${find}"
    elif [ -n "${list}" ]
    then
        list_music_library "${list}"
    elif [ -n "${sync}" ]
    then
        sync_music_library "${sync}"
    else
        exit 1
    fi
}

##
# Install playlist and library configuration files under user's home
#
install()
{
    local playlist=
    local library=

    print_info "Creating local directory in home."
    mkdir -pv "${PROGSHAREDIR}"

    echo "Where are your music playlists located?"
    read -p "> " playlist
    if [ ! -d "${playlist}" ]
    then
        print_err "Directory '${playlist}' does not exist."
        return 1
    else
        print_info "Saving music playlist location."
        ln -sv "${playlist}" "${PLAYLISTDIR}"
    fi

    echo "Where is your music library located?"
    read -p "> " library
    if [ ! -d "${library}" ]; then 
        print_err "Directory '${library}' does not exist."
        return 2
    else
        print_info "Saving music library location."
        ln -sv "${library}" "${LIBRARYDIR}"
    fi
}

##
# Uninstall configuration files under user's home
#
uninstall()
{
    print_info "Uninstalling Music On Console Wrapper."
    rm -rfv "${PROGSHAREDIR}"
}


##
# Download music.
##
download_music()
{
    local download="${1}"

    echo "DryRun     : ${MUSIC_LIB_DRYRUN}."
    echo "Prompt     : ${MUSIC_LIB_PROMPT}."
    echo "Unofficial : ${MUSIC_LIB_UNOFFICIAL}."
    echo "Download   : ${download}."

    if ! music_lib_is_downloadable "${download}"
    then
        exit ${EXIT_MUSIC_LIB_INVALID_DOWNLOAD}
    fi

    local artist="$(music_lib_get_artist "${download}")"
    local song="$(music_lib_get_song "${download}")"
    if ! music_lib_is_artist "${artist}" && ! music_lib_is_song "${song}"
    then
        exit ${EXIT_MUSIC_LIB_SONG_NAME_NOT_FOUND}
    elif ! music_lib_is_music "${artist}" "${song}"
    then
        exit ${EXIT_MUSIC_LIB_MUSIC_NOT_FOUND}
    else
        :
    fi

    echo "Artist : ${artist}"
    echo "Song   : ${song}"
    if ! music_lib_is_dryrun
    then
        builtin cd "${LIBRARYDIR}"
        if [ -n "${artist}" ]
        then
            mkdir -pv "${artist}"
            builtin cd "${artist}"
        fi

        music_lib_download_youtube_search_page "${query}"
        music_lib_download_save_results

        if music_lib_is_prompt
        then
            music_lib_download_prompt
            # read response
            # if ! is_integer "${response}" \
            #         || [ ${response} -lt 1 -o ${response} -gt ${i} ]
            # then
            #     return 1
            # fi
            # response=$[ ${response} - 1 ]
        fi
        exit
        youtube_download "${unofficial}" "${prompt}" "${download}"
    fi
}

# ------------------------------------------------------------------------------
# Sync music library
sync_music_library()
{
    local line=

    while IFS= read -r line; do
        if [ ! -n "${line}" ]; then
            continue
        fi

        download_music "${line}"
    done < "${LIBRARYFILE}"
}

# ------------------------------------------------------------------------------
# Find music in the library
find_music_in_library()
{
    if [ -z "${1}" ]; then
        print_err "Unable to find music: No search query ('-q') entered."
        exit 1
    fi

    builtin cd "${LIBRARYDIR}"

    local queries=("${@}")
    local artist=
    local song=
    local q=
    local i=
    local f=
    local name=
    local IFS=$'\n'

    # Search library
    for q in "${queries[@]}"; do
        i=0

        # Display matches
        for f in $(find . -iname "*${q}*"); do
            name=$(basename "${f}")
            artist="$(music_lib_get_artist "${name}")"
            song="$(music_lib_get_song "${name}")"
            i=$[ ${i} + 1 ]

            echo "Artist : ${artist}"
            echo "Song   : ${song}"
            echo
        done

        # Unable to find a match
        if [ ${i} -eq 0 ]; then
            print_err "Unable to find a match for query '${q}'."
            continue
        fi
    done
}

# ------------------------------------------------------------------------------
# List music library
list_music_library()
{
    local queries=("${@}")
    local listall=false
    local song=
    local q=
    local d=
    local f=
    local IFS=$'\n'

    # Determine what to list: User input or all artists
    if [ -z "${queries}" ]; then
        queries=(*)
        listall=true
    fi

    # List library
    for q in "${queries[@]}"; do
        builtin cd "${LIBRARYDIR}"

        # Check if artist dir and song file exist
        if [ ! -d "${q}" ]; then
            if ! ${listall} && [ ! -f "${q}" ]; then
                print_err "Unable to list '${q}'."
            fi
            continue
        fi

        # Display all songs from artist
        builtin cd "${q}"
        echo "${q}"

        for f in *; do
            song="$(music_lib_get_song "${f}")"
            echo "    ${song}"
        done

        if [ "${q}" != "${queries[-1]}" ]; then
            echo
        fi
    done
}

##
# Connect to youtube and download music to the music library.
##
youtube_download()
{
    local query="${1}"
    local artist="$(music_lib_get_artist "${query}")"
    local song="$(music_lib_get_song "${query}")"

    local result=$(music_lib_download_save_results "${result}")

    local title=$(echo "${result}" | cut -f 1 -d ';')
    local href=$(echo "${result}" | cut -f 2 -d ';')

    print_info "Downloading..."
    youtube-dl-mp3 --no-playlist -x --audio-format mp3 "${YOUTUBE}${href}"

    # Rename the song to the appropriate name
    if [ -n "${title}" ]; then
        mv "${title}.mp3" "${artist} - ${song}.mp3"
    fi

    rm -f "${RESULTPAGE}"
}

##
# Prompt user which song they would like to download.
##
music_lib_download_prompt()
{
    print_info "Which song would you like to download?"
    local i=1
    while IFS= read -r line
    do
        echo "Line: ${line}."
    done < "${MUSIC_LIB_RESULTS_FILE}"

    echo "${i}: ${title}" 1>&2
    i=$[ ${i} + 1 ]
    echo -n "> "
    echo
    exit 0
}

##
# Get href of desired search from results page. Will prompt user if option is
# specified.
# Populate list of all hrefs in search page
##
music_lib_download_save_results()
{
    local IFS=$'\n'
    local line=
    local i=0
    echo "Results File: ${MUSIC_LIB_RESULTS_FILE}."
    for line in $(grep 'href="/watch?v=' "${RESULTPAGE}" | grep 'title=')
    do
        local ref=$(get_search_result_href "${line}")
        local title=
        if [ "${ref/list=}" == "${ref}" ]
        then
            title=$(get_search_result_title "${line}")
            i=$[ ${i} + 1 ]
            echo "~${ref};${title}~" 1>&2
            echo "${ref};${title}" >> "${MUSIC_LIB_RESULTS_FILE}"
            if ! music_lib_is_prompt
            then
                break
            fi
        fi
    done
}

# ------------------------------------------------------------------------------
# Return href from a line in the search result page
get_search_result_href()
{
    echo "${1}" \
        | grep -E -o 'href="/watch\?v=[^"]*' \
        | head -n 1 \
        | sed 's/href="//'
}

# ------------------------------------------------------------------------------
# Return title from a line in the search result page
get_search_result_title()
{
    echo "${1}" \
        | grep -E -o 'title="[^"]*' \
        | head -n 1 \
        | sed 's/title="//; s/\&quot\;/"/g'
}

# ------------------------------------------------------------------------------
# Print any discrepancies between the music library file and the library itself
check_music_library()
{
    local artist=
    local song=

    while IFS= read -r line; do
        if [ ! -n "${line}" ]; then
            continue;
        fi

        artist=$(music_lib_get_artist "${line}")
        song=$(music_lib_get_song "${line}")

        # Check for existence of artist directory
        if [ ! -d "${LIBRARYDIR}/${artist}" ]; then
            print_warn "Unable to find artist '${artist}' for song '${song}'."
            continue
        fi

        # Check for existence of song file
        if [ ! -f "${LIBRARYDIR}/${artist}/${line}" -o ! -f "${LIBRARYDIR}/${artist}/${song}" ]; then
            print_warn "Unable to find song '${song}' for artist '${artist}'."
            continue
        fi

        printf "%40s %40s %s\n" "'${artist}'" "'${song}'" "${line}"
    done < "${LIBRARYFILE}"
}













##
# Download Youtube search results page.
# 
# Convert the search string into a URL-friendly string, append "official video"
# to the end if unofficial flag is not set, and download the results page.
##
music_lib_download_youtube_search_page()
{
    local unofficial="${1}"
    local search="${2}"
    local url=$(echo "${YOUTUBE}/results?search_query=${search}" \
                    | sed -e 's/ /\+/g' -e 's/,/%2c/g' -e "s/'/%27/g")
    if [ -n "${unofficial}" ]
    then
        url="${url}+official+video"
    fi
    print_info "Downloading Youtube search results page."
    wget -q "${url}" -O "${RESULTPAGE}"
    if [ $? -ne 0 ]
    then
        print_err "Unable to download search page."
        rm -f "${RESULTPAGE}"
        exit ${EXIT_MUSIC_LIB_SEARCH_PAGE_ERROR}
    fi
    return 0
}

##
# Return the name of the artist from the input song name.
# 
# Expects an input song of the form 'Artist - Song.mp3'. If the input and output
# are exactly the same, return an error. In this case, it is assumed that the
# input is in fact the song name, without the artist.
##
music_lib_get_artist()
{
    local file="${1}"
    local artist="${file% - *}"
    if [ "${artist}" == "${file}" ]
    then
        return ${EXIT_MUSIC_LIB_ARTIST_NOT_FOUND}
    else
        return 0
    fi
}

##
# Return the name of the song from the input song name.
# 
# Expects an input song of the form 'Artist - Song.mp3'; however, it is ok if
# the input and the output are exactly the same. Maybe the user does not know
# the artist's name.
##
music_lib_get_song()
{
    local file="${1}"
    local song="${file#* - }"
    echo "${song}"
    return 0
}

##
# Check if current run of the script is a dry-run.
##
music_lib_is_dryrun()
{
    if [ -n "${MUSIC_LIB_DRYRUN}" ]
    then
        return 0
    else
        return 1
    fi
}

##
# Check if the script needs to prompt the user.
##
music_lib_is_prompt()
{
    if [ -n "${MUSIC_LIB_PROMPT}" ]
    then
        return 0
    else
        return 1
    fi
}

##
# Check name of artist.
##
music_lib_is_artist()
{
    local artist="${1}"
    if [ -n "${artist}" ]; then
        return 0
    else
        print_err "Could not determine artist name."
        return 1
    fi
}

##
# Check song name.
##
music_lib_is_song()
{
    local song="${1}"
    if [ -n "${song}" ]; then
        return 0
    else
        print_err "Could not determine song name."
        return 1
    fi
}

##
# Check if music file exists in the music library.
##
music_lib_is_music()
{
    local artist="${1}"
    local song="${1}"
    local file="${LIBRARYDIR}/"
    if [ -n "${artist}" ]
    then
        file+="${artist}/${artist} - ${song}"
    else
        file+="${song}"
    fi
    if [ ! -f "${file}.mp3" ]
    then
        return 0
    fi
    print_err "Music '${file}' already exists in your music library."
    return 1
}

##
# Check if input was a song that could be downloaded.
##
music_lib_is_downloadable()
{
    local download="${1}"
    if [ -n "${download}" ]
    then
        return 0
    else
        print_err "Must specify song to download."
        return 1
    fi
}

##
# Run script
##
main "${@}"
