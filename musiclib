#!/bin/bash
# ------------------------------------------------------------------------------
# 
# Name:    musiclib.sh
# Author:  Gabriel Gonzalez
# Email:   gabeg@bu.edu
# License: The MIT License (MIT)
# 
# Syntax: ./musiclib [options]
# 
# Description: A command line interface to interact with your music library.
# 
# Notes: There's a thing with last lines when reading the file and getting
#        length of file. There's a hard limit of 10 save results.
# 
# ------------------------------------------------------------------------------

# Globals
PROGRAM="${0##*/}"
PROGDIR=$(dirname "$(readlink -f "${0}")")
MUSIC_LIB_SHARE_DIR="${HOME}/.local/share/${PROGRAM}"

PLAYLISTDIR="${MUSIC_LIB_SHARE_DIR}/playlist"
LIBRARYDIR="${MUSIC_LIB_SHARE_DIR}/library"
LIBRARYFILE="${LIBRARYDIR}/library.txt"
YOUTUBE="https://www.youtube.com"
RESULTPAGE="/tmp/results.html"

MUSIC_LIB_RESULTS_FILE="/tmp/results.txt"
MUSIC_LIB_DRYRUN=
MUSIC_LIB_PROMPT=
MUSIC_LIB_UNOFFICIAL=
MUSIC_LIB_VERBOSE=

# Options
VERBOSE=
SYNC=

# Source utility
. "commandline.sh"
. "io.sh"

EXIT_MUSIC_LIB_INVALID_INSTALL_ARG=6
EXIT_MUSIC_LIB_INVALID_INSTALL_LOC=6
EXIT_MUSIC_LIB_INVALID_SEARCH=7
EXIT_MUSIC_LIB_SEARCH_PAGE_ERROR=8
EXIT_MUSIC_LIB_INVALID_DOWNLOAD=9
EXIT_MUSIC_LIB_ARTIST_NOT_FOUND=10
EXIT_MUSIC_LIB_SONG_NAME_NOT_FOUND=11
EXIT_MUSIC_LIB_MUSIC_NOT_FOUND=12
EXIT_MUSIC_LIB_INVALID_RESULT=13

##
# Music Library
##
main()
{
    cli_options "-h|--help           |Print program usage." \
                "-d|--download=song: |Download music." \
                "  |--dry-run        |Do not create artist directories or download any songs. Used with '-S'." \
                "-f|--find           |Find music in the library." \
                "-l|--list=playlist::|List music in the library." \
                "-p|--prompt         |Prompt the user to select a video, whose audio will be downloaded." \
                "-q|--query=search:::|Query string." \
                "-S|--sync           |Sync music library." \
                "-u|--unofficial     |Do not append 'official' to the Youtube search string." \
                "-v|--verbose        |Verbose output."
    cli_parse "${@}"

    local help=$(cli_get "help")
    local download=$(cli_get "download")
    local find=$(cli_get "find")
    local list=$(cli_get "list")
    local query=$(cli_get "query")
    local sync=$(cli_get "sync")

    MUSIC_LIB_DRYRUN=$(cli_get "dry-run")
    MUSIC_LIB_PROMPT=$(cli_get "prompt")
    MUSIC_LIB_UNOFFICIAL=$(cli_get "unofficial")
    MUSIC_LIB_VERBOSE=$(cli_get "verbose")

    # Run options
    trap music_lib_cleanup EXIT
    if [ -n "${help}" ]
    then
        cli_usage
        exit 0
    elif [ -n "${download}" ]
    then
        music_lib_download "${download}"
    elif [ -n "${find}" ]
    then
        find_music_in_library "${find}"
    elif [ -n "${list}" ]
    then
        list_music_library "${list}"
    elif [ -n "${sync}" ]
    then
        sync_music_library
    else
        exit 1
    fi
}

# ------------------------------------------------------------------------------
# Find music in the library
find_music_in_library()
{
    if [ -z "${1}" ]; then
        print_err "Unable to find music: No search query ('-q') entered."
        exit 1
    fi

    builtin cd "${LIBRARYDIR}"

    local queries=("${@}")
    local artist=
    local song=
    local q=
    local i=
    local f=
    local name=
    local IFS=$'\n'

    # Search library
    for q in "${queries[@]}"; do
        i=0

        # Display matches
        for f in $(find . -iname "*${q}*"); do
            name=$(basename "${f}")
            artist=$(music_lib_get_artist "${name}")
            song=$(music_lib_get_song "${name}")
            i=$[ ${i} + 1 ]

            echo "Artist : ${artist}"
            echo "Song   : ${song}"
            echo
        done

        # Unable to find a match
        if [ ${i} -eq 0 ]; then
            print_err "Unable to find a match for query '${q}'."
            continue
        fi
    done
}

# ------------------------------------------------------------------------------
# List music library
list_music_library()
{
    local queries=("${@}")
    local listall=false
    local song=
    local q=
    local d=
    local f=
    local IFS=$'\n'

    # Determine what to list: User input or all artists
    if [ -z "${queries}" ]; then
        queries=(*)
        listall=true
    fi

    # List library
    for q in "${queries[@]}"; do
        builtin cd "${LIBRARYDIR}"

        # Check if artist dir and song file exist
        if [ ! -d "${q}" ]; then
            if ! ${listall} && [ ! -f "${q}" ]; then
                print_err "Unable to list '${q}'."
            fi
            continue
        fi

        # Display all songs from artist
        builtin cd "${q}"
        echo "${q}"

        for f in *; do
            song=$(music_lib_get_song "${f}")
            echo "    ${song}"
        done

        if [ "${q}" != "${queries[-1]}" ]; then
            echo
        fi
    done
}

# ------------------------------------------------------------------------------
# Return href from a line in the search result page
get_search_result_href()
{
    echo "${1}" \
        | grep -E -o 'href="/watch\?v=[^"]*' \
        | head -n 1 \
        | sed 's/href="//'
}

# ------------------------------------------------------------------------------
# Return title from a line in the search result page
get_search_result_title()
{
    echo "${1}" \
        | grep -E -o 'title="[^"]*' \
        | head -n 1 \
        | sed 's/title="//; s/\&quot\;/"/g'
}

# ------------------------------------------------------------------------------
# Print any discrepancies between the music library file and the library itself
check_music_library()
{
    local artist=
    local song=

    while IFS= read -r line; do
        if [ ! -n "${line}" ]; then
            continue;
        fi

        artist=$(music_lib_get_artist "${line}")
        song=$(music_lib_get_song "${line}")

        # Check for existence of artist directory
        if [ ! -d "${LIBRARYDIR}/${artist}" ]; then
            print_warn "Unable to find artist '${artist}' for song '${song}'."
            continue
        fi

        # Check for existence of song file
        if [ ! -f "${LIBRARYDIR}/${artist}/${line}" -o ! -f "${LIBRARYDIR}/${artist}/${song}" ]; then
            print_warn "Unable to find song '${song}' for artist '${artist}'."
            continue
        fi

        printf "%40s %40s %s\n" "'${artist}'" "'${song}'" "${line}"
    done < "${LIBRARYFILE}"
}













##
# Install the Music Library.
# 
# Create the share directory under ~/.local/share, and create symbolic links to
# the user's playlist and library locations.
##
music_lib_install()
{
    music_lib_install_location "share"
    music_lib_install_location "playlist"
    music_lib_install_location "library"
}

##
# Uninstall configuration files under ~/.local/share and remove any temporary
# files that were created.
##
music_lib_uninstall()
{
    music_lib_cleanup "uninstall"
}

# ------------------------------------------------------------------------------
# Sync music library
sync_music_library()
{
    local line=
    while IFS= read -r line
    do
        if [ ! -n "${line}" ]
        then
            continue
        fi
        music_lib_download "${line}"
    done < "${LIBRARYFILE}"
}

##
# Download music.
##
music_lib_download()
{
    if ! music_lib_is_downloadable "${1}"
    then
        print_err "Must specify song to download."
        exit ${EXIT_MUSIC_LIB_INVALID_DOWNLOAD}
    fi

    local download="${1}"
    local artist=$(music_lib_get_artist "${download}")
    local song=$(music_lib_get_song "${download}")
    if ! music_lib_is_artist "${artist}" && ! music_lib_is_song "${song}"
    then
        print_err "Could not determine artist and song name."
        exit ${EXIT_MUSIC_LIB_SONG_NAME_NOT_FOUND}
    elif music_lib_is_music "${artist}" "${song}"
    then
        print_err "Music '${file}' already exists in your music library."
        exit ${EXIT_MUSIC_LIB_MUSIC_NOT_FOUND}
    else
        echo "Artist : ${artist}"
        echo "Song   : ${song}"
    fi
    if music_lib_is_dryrun
    then
        return 0
    fi

    builtin cd "${LIBRARYDIR}"
    if [ -n "${artist}" ]
    then
        mkdir -pv "${artist}"
        builtin cd "${artist}"
    fi

    music_lib_download_search_page "${download}"
    music_lib_download_save_results
    music_lib_download_content "${artist}" "${song}"
}

##
# Download content to the music library.
##
music_lib_download_content()
{
    local artist="${1}"
    local song="${2}"
    local resultnum=1
    local result=
    local status=0
    if music_lib_is_prompt
    then
        music_lib_download_prompt
        read -p "> " resultnum
    fi
    result=$(music_lib_download_get_result "${resultnum}")
    status=$?
    echo "Result: ${result}."
    if [ ${status} -ne 0 ]
    then
        return ${status}
    fi

    local href="${result%%;*}"
    local title="${result#*;}"
    print_info "Downloading..."
    echo youtube-dl-mp3 --no-playlist -x --audio-format mp3 "${YOUTUBE}${href}"
    if [ -n "${title}" ]
    then
        local name="${artist} - ${song}"
        if [ -z "${artist}" ]
        then
            name="${song}"
        fi
        echo mv "${title}.mp3" "${name}.mp3"
    fi
}

##
# Get href of desired search from results page. Will prompt user if option is
# specified.
# Populate list of all hrefs in search page
##
music_lib_download_save_results()
{
    local IFS=$'\n'
    local line=
    local i=0
    echo "Results File: ${MUSIC_LIB_RESULTS_FILE}."
    : > "${MUSIC_LIB_RESULTS_FILE}"
    for line in $(grep 'href="/watch?v=' "${RESULTPAGE}" | grep 'title=')
    do
        local ref=$(get_search_result_href "${line}")
        local title=
        if [ "${ref/list=}" == "${ref}" ]
        then
            title=$(get_search_result_title "${line}")
            i=$[ ${i} + 1 ]
            echo "${ref};${title}" >> "${MUSIC_LIB_RESULTS_FILE}"
            if ! music_lib_is_prompt || [ ${i} -eq 10 ]
            then
                break
            fi
        fi
    done
}

##
# Download search results page.
# 
# Convert the search string into a URL-friendly string, append "official video"
# to the end if unofficial flag is not set, and download the results page.
##
music_lib_download_search_page()
{
    local search="${1}"
    if [ -z "${search}" ]
    then
        print_err "Must specify a search query."
        exit ${EXIT_MUSIC_LIB_INVALID_SEARCH}
    fi
    print_info "Downloading search results page."
    local url=$(music_lib_download_get_url "${search}")
    wget -q "${url}" -O "${RESULTPAGE}"
    if [ $? -ne 0 ]
    then
        print_err "Unable to download search page."
        exit ${EXIT_MUSIC_LIB_SEARCH_PAGE_ERROR}
    fi
    return 0
}

##
# Prompt user which song they would like to download.
##
music_lib_download_prompt()
{
    print_info "Which song would you like to download?"
    local line=
    local i=1
    while IFS= read -r line
    do
        echo "${i}: ${line}"
        i=$[ ${i} + 1 ]
    done < "${MUSIC_LIB_RESULTS_FILE}"
}

##
# Cleanup all files that were created.
##
music_lib_cleanup()
{
    if [ "${1}" == "uninstall" ]
    then
        print_info "Uninstalling the Music Library local share directory."
        rm -rfv "${MUSIC_LIB_SHARE_DIR}"
    fi
    rm -f "${RESULTPAGE}"
    rm -f "${MUSIC_LIB_RESULTS_FILE}"
}

##
# Return the requested line in the results file.
##
music_lib_download_get_result()
{
    local num="${1}"
    local file="${MUSIC_LIB_RESULTS_FILE}"
    local length=$(wc -l < "${file}")
    if [ -z "${num}" ]
    then
        print_err "Exiting."
        return ${EXIT_MUSIC_LIB_INVALID_RESULT}
    fi
    if ! is_integer "${num}" || [ ${num} -lt 1 -o ${num} -gt ${length} ]
    then
        print_err "Unable to retrieve result number '${num}': No such result."
        return ${EXIT_MUSIC_LIB_INVALID_RESULT}
    fi
    sed "${num}q;d" "${file}"
    return $?
}

##
# Return the URL to the content.
##
music_lib_download_get_url()
{
    local search="${1}"
    local url=$(echo "${YOUTUBE}/results?search_query=${search}" \
                    | sed -e 's/ /\+/g' -e 's/,/%2c/g' -e "s/'/%27/g")
    if music_lib_is_official
    then
        url="${url}+official+video"
    fi
    echo "${url}"
}

##
# Create Music Library links/directories for the given locations.
# 
# Accepted locations are 'share', 'library', or 'playlist'.
##
music_lib_install_location()
{
    local location="${1}"
    local response=
    local msg=
    case "${location}" in
        share)
            print_info "Creating local share directory for the Music Library."
            mkdir -pv "${MUSIC_LIB_SHARE_DIR}"
            return 0
            ;;
        library)
            msg="Where is your music library located?"
            ;;
        playlist)
            msg="Where are your music playlists located?"
            ;;
        *)
            exit ${EXIT_MUSIC_LIB_INVALID_INSTALL_ARG}
            ;;
    esac

    echo "${msg}"
    read -p "> " response
    if [ ! -d "${response}" ]
    then
        print_err "Directory '${response}' does not exist."
        return ${EXIT_MUSIC_LIB_INVALID_INSTALL_LOC}
    else
        print_info "Saving music ${location} location."
        ln -sv "${playlist}" "${PLAYLISTDIR}"
    fi
    return 0
}

# Return the name of the artist from the input song name.
# 
# Expects an input song of the form 'Artist - Song.mp3'. If the input and output
# are exactly the same, return an error. In this case, it is assumed that the
# input is in fact the song name, without the artist.
##
music_lib_get_artist()
{
    local file="${1}"
    local artist="${file% - *}"
    if [ "${artist}" == "${file}" ]
    then
        return ${EXIT_MUSIC_LIB_ARTIST_NOT_FOUND}
    fi
    echo "${artist}"
    return 0
}

##
# Return the name of the song from the input song name.
# 
# Expects an input song of the form 'Artist - Song.mp3'; however, it is ok if
# the input and the output are exactly the same. Maybe the user does not know
# the artist's name.
##
music_lib_get_song()
{
    local file="${1}"
    local song="${file#* - }"
    echo "${song}"
    return 0
}

##
# Check if current run of the script is a dry-run.
##
music_lib_is_dryrun()
{
    if [ -n "${MUSIC_LIB_DRYRUN}" ]
    then
        return 0
    else
        return 1
    fi
}

##
# Check if the script needs to prompt the user.
##
music_lib_is_prompt()
{
    if [ -n "${MUSIC_LIB_PROMPT}" ]
    then
        return 0
    else
        return 1
    fi
}

##
# Check if the script should make a query for unofficial content.
##
music_lib_is_official()
{
    if [ -z "${MUSIC_LIB_UNOFFICIAL}" ]
    then
        return 0
    else
        return 1
    fi
}

##
# Check name of artist.
##
music_lib_is_artist()
{
    local artist="${1}"
    if [ -n "${artist}" ]; then
        return 0
    else
        return 1
    fi
}

##
# Check song name.
##
music_lib_is_song()
{
    local song="${1}"
    if [ -n "${song}" ]; then
        return 0
    else
        return 1
    fi
}

##
# Check if music file exists in the music library.
##
music_lib_is_music()
{
    local artist="${1}"
    local song="${1}"
    local file="${LIBRARYDIR}/"
    if [ -n "${artist}" ]
    then
        file+="${artist}/${artist} - ${song}"
    else
        file+="${song}"
    fi
    if [ -f "${file}.mp3" ]
    then
        return 0
    fi
    return 1
}

##
# Check if input was a song that could be downloaded.
##
music_lib_is_downloadable()
{
    local download="${1}"
    if [ -n "${download}" ]
    then
        return 0
    else
        return 1
    fi
}

##
# Run script
##
main "${@}"
