#!/bin/bash
# ------------------------------------------------------------------------------
# 
# Name:    musiclib.sh
# Author:  Gabriel Gonzalez
# Email:   gabeg@bu.edu
# License: The MIT License (MIT)
# 
# Syntax: ./musiclib [options]
# 
# Description: A command line interface to interact with your music library.
# 
# Notes: None.
# 
# ------------------------------------------------------------------------------

# Globals
PROGRAM="${0##*/}"
PROGDIR=$(dirname "$(readlink -f "${0}")")
PROGSHAREDIR="${HOME}/.local/share/${PROGRAM}"
PLAYLISTDIR="${PROGSHAREDIR}/playlist"
LIBRARYDIR="${PROGSHAREDIR}/library"
LIBRARYFILE="${LIBRARYDIR}/library.txt"
YOUTUBE="https://www.youtube.com"
RESULTPAGE="result.html"

# Options
VERBOSE=
SYNC=
TEST=
IGNOREOFFICIAL=
PROMPTRESULTS=

# Source utility
. "commandline.sh"
. "io.sh"

##
# Music Library
##
main()
{
    cli_options "-h|--help           |Print program usage." \
                "-d|--download=song: |Download music." \
                "  |--dry-run        |Do not create artist directories or download any songs. Used with '-S'." \
                "-f|--find           |Find music in the library." \
                "-l|--list=playlist::|List music in the library." \
                "-p|--prompt         |Prompt the user to select a video, whose audio will be downloaded." \
                "-q|--query=search:::|Query string." \
                "-S|--sync           |Sync music library." \
                "-u|--unofficial     |Do not append 'official' to the Youtube search string." \
                "-v|--verbose        |Verbose output."
    cli_parse "${@}"

    local help="$(cli_get "help")"
    local download="$(cli_get "download")"
    local dryrun="$(cli_get "dry-run")"
    local find="$(cli_get "find")"
    local list="$(cli_get "list")"
    local prompt="$(cli_get "prompt")"
    local query="$(cli_get "query")"
    local sync="$(cli_get "sync")"
    local unofficial="$(cli_get "unofficial")"
    local verbose="$(cli_get "verbose")"

    # Run options
    if [ -n "${help}" ]
    then
        cli_usage
        exit 0
    elif [ -n "${download}" ]
    then
        download_music "${dryrun}" "${prompt}" "${unofficial}" "${download}"
    elif [ -n "${find}" ]
    then
        find_music_in_library "${find}"
    elif [ -n "${list}" ]
    then
        list_music_library "${list}"
    elif [ -n "${sync}" ]
    then
        sync_music_library "${dryrun}" "${prompt}" "${unofficial}" "${sync}"
    else
        exit 1
    fi
}

##
# Install playlist and library configuration files under user's home
#
install()
{
    local playlist=
    local library=

    print_info "Creating local directory in home."
    mkdir -pv "${PROGSHAREDIR}"

    echo "Where are your music playlists located?"
    read -p "> " playlist
    if [ ! -d "${playlist}" ]
    then
        print_err "Directory '${playlist}' does not exist."
        return 1
    else
        print_info "Saving music playlist location."
        ln -sv "${playlist}" "${PLAYLISTDIR}"
    fi

    echo "Where is your music library located?"
    read -p "> " library
    if [ ! -d "${library}" ]; then 
        print_err "Directory '${library}' does not exist."
        return 2
    else
        print_info "Saving music library location."
        ln -sv "${library}" "${LIBRARYDIR}"
    fi
}

##
# Uninstall configuration files under user's home
#
uninstall()
{
    print_info "Uninstalling Music On Console Wrapper."
    rm -rfv "${PROGSHAREDIR}"
}


##
# Download music
##
download_music()
{
    local dryrun="${1}"
    local prompt="${2}"
    local unofficial="${3}"
    local download="${4}"

    if [ -z "${download}" ]; then
        print_err "Unable to download music: No input found."
        exit 1
    fi

    echo "DryRun: ${dryrun}."
    echo "Prompt: ${prompt}."
    echo "Unoffi: ${unofficial}."
    echo "Downlo: ${download}."

    local queries=("${@}")
    local artist=
    local song=

    for q in "${queries[@]}"; do
        builtin cd "${LIBRARYDIR}"

        artist="$(get_artist "${download}")"
        song="$(get_song "${download}")"
        echo "Artist : ${artist}"
        echo "Song   : ${song}"

        # Check parameters and ensure file does not already exist
        if ! check_artist "${artist}" || ! check_song "${song}" \
                || ! check_music_file "${artist}" "${song}"
        then
            continue
        fi

        # Download music query
        if [ -z "${dryrun}" ]
        then
            youtube_download "${q}"
        fi

        if [ "${q}" != "${queries[-1]}" ] || [ -n "${SYNC}" ]; then
            echo
        fi
    done
}

# ------------------------------------------------------------------------------
# Sync music library
sync_music_library()
{
    local line=

    while IFS= read -r line; do
        if [ ! -n "${line}" ]; then
            continue
        fi

        download_music "${line}"
    done < "${LIBRARYFILE}"
}

# ------------------------------------------------------------------------------
# Find music in the library
find_music_in_library()
{
    if [ -z "${1}" ]; then
        print_err "Unable to find music: No search query ('-q') entered."
        exit 1
    fi

    builtin cd "${LIBRARYDIR}"

    local queries=("${@}")
    local artist=
    local song=
    local q=
    local i=
    local f=
    local name=
    local IFS=$'\n'

    # Search library
    for q in "${queries[@]}"; do
        i=0

        # Display matches
        for f in $(find . -iname "*${q}*"); do
            name=$(basename "${f}")
            artist="$(get_artist "${name}")"
            song="$(get_song "${name}")"
            i=$[ ${i} + 1 ]

            echo "Artist : ${artist}"
            echo "Song   : ${song}"
            echo
        done

        # Unable to find a match
        if [ ${i} -eq 0 ]; then
            print_err "Unable to find a match for query '${q}'."
            continue
        fi
    done
}

# ------------------------------------------------------------------------------
# List music library
list_music_library()
{
    local queries=("${@}")
    local listall=false
    local song=
    local q=
    local d=
    local f=
    local IFS=$'\n'

    # Determine what to list: User input or all artists
    if [ -z "${queries}" ]; then
        queries=(*)
        listall=true
    fi

    # List library
    for q in "${queries[@]}"; do
        builtin cd "${LIBRARYDIR}"

        # Check if artist dir and song file exist
        if [ ! -d "${q}" ]; then
            if ! ${listall} && [ ! -f "${q}" ]; then
                print_err "Unable to list '${q}'."
            fi
            continue
        fi

        # Display all songs from artist
        builtin cd "${q}"
        echo "${q}"

        for f in *; do
            song="$(get_song "${f}")"
            echo "    ${song}"
        done

        if [ "${q}" != "${queries[-1]}" ]; then
            echo
        fi
    done
}

# ------------------------------------------------------------------------------
# Download music
youtube_download()
{
    local query="${1}"
    local artist="$(get_artist "${query}")"
    local song="$(get_song "${query}")"

    mkdir -pv "${artist}"
    builtin cd "${artist}"

    # Download the song
    download_search_results_page "${query}"

    local result=$(get_search_result "${result}")
    local title=$(echo "${result}" | cut -f 1 -d ';')
    local href=$(echo "${result}" | cut -f 2 -d ';')

    echo "Downloading..."
    youtube-dl-mp3 --no-playlist -x --audio-format mp3 "${YOUTUBE}${href}"

    # Rename the song to the appropriate name
    if [ -n "${title}" ]; then
        mv "${title}.mp3" "${artist} - ${song}.mp3"
    fi

    rm -f "${RESULTPAGE}"
}

# ------------------------------------------------------------------------------
# Download search results page
download_search_results_page()
{
    # Determine URL of song to search
    local query="${1}"
    local search=$(echo "${query}" | sed -e 's/ /\+/g' -e 's/,/%2c/g' -e "s/'/%27/g")
    local searchurl="${YOUTUBE}/results?search_query=${search}"

    if [ -z "${IGNOREOFFICIAL}" ]; then
        searchurl="${searchurl}+official+video"
    fi

    # Download youtube search page
    wget -q "${searchurl}" -O "${RESULTPAGE}"
}

# ------------------------------------------------------------------------------
# Get href of desired search from results page. Will prompt user if option is
# specified
get_search_result()
{
    local IFS=$'\n'
    local _result="${1}"
    local allref=()
    local alltitle=()
    local ref=
    local title=
    # local response=0
    local i=1

    if [ -n "${PROMPTRESULTS}" ]; then
        echo "Which song would you like to download?" 1>&2
    fi

    # Populate list of all hrefs in search page
    for line in $(grep 'href="/watch?v=' "${RESULTPAGE}" | grep 'title='); do
        ref=$(get_search_result_href "${line}")

        # Do something with the title
        if [ "${ref/list=}" == "${ref}" ]; then
            title=$(get_search_result_title "${line}")
            alltitle+=("${title}")
            allref+=("${ref}")

            # Stop after one search if prompt not specified
            if [ -z "${PROMPTRESULTS}" ]; then
                break
            else
                echo "${i}: ${title}" 1>&2
                i=$[ ${i} + 1 ]
            fi
        fi
    done

    # Prompt user if specified
    if [ -n "${PROMPTRESULTS}" ]; then
        echo -n "> " 1>&2
        read response </dev/tty

        if ! is_integer "${response}" \
                || [ ${response} -lt 1 -o ${response} -gt ${i} ]
        then
            return 1
        fi

        response=$[ ${response} - 1 ]
    else
        response=0
    fi

    echo "${alltitle[${response}]};${allref[${response}]}"
}

# ------------------------------------------------------------------------------
# Return href from a line in the search result page
get_search_result_href()
{
    echo "${1}" \
        | grep -E -o 'href="/watch\?v=[^"]*' \
        | head -n 1 \
        | sed 's/href="//'
}

# ------------------------------------------------------------------------------
# Return title from a line in the search result page
get_search_result_title()
{
    echo "${1}" \
        | grep -E -o 'title="[^"]*' \
        | head -n 1 \
        | sed 's/title="//; s/\&quot\;/"/g'
}

# ------------------------------------------------------------------------------
# Print any discrepancies between the music library file and the library itself
check_music_library()
{
    local artist=
    local song=

    while IFS= read -r line; do
        if [ ! -n "${line}" ]; then
            continue;
        fi

        artist=$(get_artist "${line}")
        song=$(get_song "${line}")

        # Check for existence of artist directory
        if [ ! -d "${LIBRARYDIR}/${artist}" ]; then
            print_warn "Unable to find artist '${artist}' for song '${song}'."
            continue
        fi

        # Check for existence of song file
        if [ ! -f "${LIBRARYDIR}/${artist}/${line}" -o ! -f "${LIBRARYDIR}/${artist}/${song}" ]; then
            print_warn "Unable to find song '${song}' for artist '${artist}'."
            continue
        fi

        printf "%40s %40s %s\n" "'${artist}'" "'${song}'" "${line}"
    done < "${LIBRARYFILE}"
}

# ------------------------------------------------------------------------------
# Return artist name
get_artist()
{
    local line="${1}"
    local artist=
    local i=

    # Artist name is everything before ' - '
    for (( i=0; i < ${#line}; i++ )); do
        if [ "${line:${i}:3}" == " - " ]; then
            echo "${line:0:${i}}"
            return 0
        fi
    done
}

# ------------------------------------------------------------------------------
# Return song name
get_song()
{
    local line="${1}"
    local song=
    local len=
    local i=
    local j=

    # Song name is everything after ' - '
    for (( i=0; i < ${#line}; i++ )); do
        if [ "${line:${i}:3}" == " - " ]; then
            j=$[ ${i} + 3 ]
            len=$[ ${#line} - ${j} ]

            echo "${line:${j}:${len}}"

            return 0
        fi
    done
}

# ------------------------------------------------------------------------------
# Check artist name
check_artist()
{
    if [ -z "${artist}" ]; then
        print_err "Artist could not be found for query: '${q}'"
        return 1
    fi

    return 0
}

# ------------------------------------------------------------------------------
# Check song name
check_song()
{
    if [ -z "${song}" ]; then
        print_err "Song name could not be found for query: '${q}'"
        return 1
    fi

    return 0
}

# ------------------------------------------------------------------------------
# Check artist name
check_music_file()
{
    if [ -f "${artist}/${artist} - ${song}".* ]; then
        return 1
    fi

    return 0
}

# ------------------------------------------------------------------------------
# Run script
main "${@}"
